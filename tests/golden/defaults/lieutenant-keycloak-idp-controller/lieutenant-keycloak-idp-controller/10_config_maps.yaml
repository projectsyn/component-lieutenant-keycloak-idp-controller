apiVersion: v1
data:
  client-roles.jsonnet: |
    local context = std.extVar('context');

    [{
      // https://github.com/sventorben/keycloak-restrict-client-auth#role-based-mode
      role: 'restricted-access',
    }]
  client.jsonnet: |
    local context = std.extVar('context');
    local vars = import 'vars.jsonnet';

    local isOpenShift = function(context)
      std.objectHas(context.cluster.status, 'facts') && std.objectHas(context.cluster.status.facts, 'openshiftOAuthRoute');

    local redirectUris = function(context)
      if isOpenShift(context) then
        [
          'https://%s/oauth2callback/%s' % [ std.parseJson(context.cluster.status.facts.openshiftOAuthRoute), vars.ocpIntegrationName ],
        ]
      else
        [
          // Defaults for https://github.com/int128/kubelogin
          'http://localhost:8000',
          'http://localhost:18000',
        ];

    local clientId = '%s%s' % [ vars.clientPrefix, context.cluster.metadata.name ];

    {
      clientId: clientId,
      name: '%s (%s)' % [ context.cluster.spec.displayName, context.cluster.metadata.name ],
      description: '',
      rootUrl: '',
      adminUrl: '',
      baseUrl: '',
      surrogateAuthRequired: false,
      enabled: true,
      alwaysDisplayInConsole: false,
      clientAuthenticatorType: 'client-secret',
      redirectUris: redirectUris(context),
      webOrigins: [],
      notBefore: 0,
      bearerOnly: false,
      consentRequired: false,
      standardFlowEnabled: true,
      implicitFlowEnabled: false,
      directAccessGrantsEnabled: true,
      serviceAccountsEnabled: false,
      // Defaults for https://github.com/int128/kubelogin
      publicClient: !isOpenShift(context),
      frontchannelLogout: true,
      protocol: 'openid-connect',
      protocolMappers: [
        {
          name: 'client roles',
          protocol: 'openid-connect',
          protocolMapper: 'oidc-usermodel-client-role-mapper',
          consentRequired: false,
          config: {
            'userinfo.token.claim': 'true',
            multivalued: 'true',
            // Yes this is somehow the default value
            'user.attribute': 'foo',
            'id.token.claim': 'true',
            'access.token.claim': 'true',
            'claim.name': 'roles',
            'jsonType.label': 'String',
            'usermodel.clientRoleMapping.clientId': clientId,
          },
        },
      ],
      attributes: {
        'oidc.ciba.grant.enabled': 'false',
        'backchannel.logout.session.required': 'true',
        'oauth2.device.authorization.grant.enabled': 'false',
        'display.on.consent.screen': 'false',
        'backchannel.logout.revoke.offline.tokens': 'false',
      },
      authenticationFlowBindingOverrides: {},
      fullScopeAllowed: false,
      nodeReRegistrationTimeout: -1,
      defaultClientScopes: [
        'web-origins',
        'acr',
        'profile',
        'roles',
        'email',
      ],
      optionalClientScopes: [
        'address',
        'phone',
        'offline_access',
        'microprofile-jwt',
      ],
      access: {
        view: true,
        configure: true,
        manage: true,
      },
    }
  vars.jsonnet: |
    {
      clientPrefix: 'cluster_',
      ocpIntegrationName: 'idp',
    }
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    name: lieutenant-keycloak-idp-controller-templates
  name: lieutenant-keycloak-idp-controller-templates
